1. javascript有哪些类型，如何进行类型判断，如何准确的进行类型判断？
js中的数据基本类型为基本类型和引用类型 基本类型： String、Number、Boolean、Null、Undefined 引用类型： Array（数组）、Object（对象） 可以通过typeof ，instanceof进行类型判断（可以让他讲讲具体怎么用，听不懂讲啥 也没事- -，反正能说就行） 通过Object.prototype.toString.call来进行精准类型判断（初级的话，答不上也没事， 中高级要求能答上来，答不上扣5分吧） 解释下啥叫引用类型：赋值的其实是一个内存地址，而不是开辟一个栈空间来存值


2. var、let、const的区别（答不上来的话，连初级都不够！直接out） var：没有块的概念，可以跨块访问，不能跨函数访问（存在变量提升，会上升到当前 作用域的最上端） let： 定义的变量只能在块作用域里访问，不能跨块访问，也不能跨函数访问 const： 定义常量（不能修改），使用时必须 初始化（就是要赋值，比如：const a = 5;可以，不能只写const a;）,只能在块级作用 域里访问 let在相同作用域内，不允许重复声明同一个变量 暂时性死区（加分项，初级就不用问啦！）： 在代码块内，使用let和const命令声明变 量之前，该变量都不可用

React

1. state发生变化，react会触发哪些生命周期(中高级一定要答上来哦！) shouldComponentUpdate => componentWillUpdate => render => componentDidUpdate ps： 如果回答的是 shouldComponentUpdate => render => getSnapshotBeforeUpdate => componentDidUpdate , 那差不多应该有高级，这是最 新的生命周期函数

2. 如果一个react 组件key值改变了，会经历哪些生命周期函数（高级一定得答上来！！！） componentwillunmount => componentwillmount => render =>
componentDidMount ps: 如果他说是key值是state还是props，你就说是key值呀，react的key值，你就告诉我 经历哪些钩子函数吧，不用和他说到底是state还是props！！！ 3. 简单的介绍下redux的用法 store = createStore(reducer); state = store.getState store.dispatch store.subscribe ps： 如果他说的是connect，privoder，那他讲的应该是react-redux,不用管他说啥， 可以强调一波仅仅只使用redux，不用react-redux, 高级要求能答上来- -！

通用能力
1. 如何进行前端代码调试？（不知道的话，那估计是刚培训出来的！！！） f12 打开调试工具进行debug断点调试

2. 列举git的常用操作（这个不会，影响不大） git clone, git checkout , git status, git co


//评测题目:
1. 尽量使用尽可能多的方式实现子元素的垂直水平居中

   <div class="father">
       <div class="child">
       </div>
   </div>

   <style>
       .father {
           width: 300px;
           height: 300px;
       }

       .child {

       }
   </style>



2. 尽可能多的方式实现如下三栏布局，要求 .main 在中间显示

<div class="container">
  <div class="main"></div>
  <div class="sub"></div>
  <div class="extra"></div>
</div>



3. ['a', 'b', 'c', 'd', 'a'] 数组去重

new Array() [...new Set()]

var newArr = []

for(var i=0;i< arr.length;i++){
	if(arr.indexOf(arr[i]) != -1) {

    }

}




4. 实现以下函数，使得输入的字符串逆序输出

function reverse(str) {
    retrun str.split('').reverse().join(',')
}
reverse('abc') -> 'cba'

'abc'.reverse() -> 'cba'
String.prototype.reverse = function() {
  retrun this.split('').reverse().join(',')
}


5. 点击元素跳转

<body>
  <div data-href="https://www.alipay.com">
    <div>
      <p>hello world</p>
    </div>
  </div>
</body>
点击 hello world，跳转到 https://www.alipay.com

6.加载图片的函数，能够感知加载成功和失败

function loadImage() {

	retrun new Promise((resole) => {
    	resole()
    }).catch( err => {
    	reject()
    })
}

loadImage('').then().catch()

7. 用 setTimeout 来实现 setInterval


8. 使用正则解析 URL 参数

/**
解析 URL 参数
@param url {string}  页面链接
@return {object}       返回参数对象
*/
function queryParse() {
}
用法：
const href = 'https://www.alipay.com?width=123&height=567&dpi=2#name'
const params = queryParse(href);
console.log(params); // {width: "123", height: "567", dpi: "2"}


9.使用正则解析 URL 参数
/**
解析 URL 参数
@param url {string}  页面链接
@return {object}       返回参数对象
*/
function queryParse() {
}
用法：
const href = 'https://www.alipay.com?width=123&height=567&dpi=2#name'
const params = queryParse(href);
console.log(params); // {width: "123", height: "567", dpi: "2"}

10.为Function扩展一个方法bindX，可以实现如下功能
使用方式：
function add(num1, num2) {
      return this.value + num1 + num2;
  }

  var data = {
      value: 1
  };

  var addEx = add.bindX(data, 2);

  addEx(3);    // 6

11.实现 Vue filter
  /**

* Use Vue filter to format bank number which user input

* Keep the tail of the number formatted by 4 digital (number length not constant)

* example input: 622222123189213

* expect output: 622 2221 2318 9213

**/

<template>
  <div>
    <input v-model="number" />
    <span>{{ number | bankFilter }}</span>
  </div>
</template>

<script>
  export default {

  }
</script>


1、实现子元素的垂直水平居中





2、清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法




3、浅拷贝、深拷贝之间的区别




4、Promise是什么？有哪些状态？




5、sessionStorage和localStorage的区别




6、[‘a’, 'b', 'c', 'd', 'a'] 数组去重



7、http常用 http 状态码有那些，分别代表是什么意思



8、Vue父子通讯方式



9、Vue路由hash模式 和 history模式的区别



10、 Vue中如何监控某个属性值的变化？





